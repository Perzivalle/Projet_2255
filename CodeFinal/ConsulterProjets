import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ConsulterProjets {

    private static final String PROJETS_FILE = "projetsSoumis.csv"; // Fichier contenant les projets soumis
    private JFrame frame;
    private JTable table;
    private DefaultTableModel tableModel;

    public ConsulterProjets() {
        frame = new JFrame("Consulter les projets en cours ou à venir");
        frame.setSize(1000, 600);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel(new BorderLayout());

        // Configuration de la JTable pour afficher les projets dans l'ordre correct
        String[] columnNames = {
                "Titre du projet",
                "Description du projet",
                "Type de travaux",
                "Quartiers affectés",
                "Rues affectées",
                "Date de début",
                "Date de fin",
                "Horaires des travaux",
                "Statut"
        };
        tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        panel.add(scrollPane, BorderLayout.CENTER);

        // Panneau pour les filtres
        JPanel filterPanel = new JPanel(new FlowLayout());
        JTextField inputFilterQuartier = new JTextField(15); // Filtre par quartier
        JTextField inputFilterDate = new JTextField(15); // Filtre par date
        JButton applyFilterButton = new JButton("Appliquer Filtre");
        JButton resetFilterButton = new JButton("Réinitialiser");
        JButton retourButton = new JButton("Retour");

        filterPanel.add(new JLabel("Filtrer par quartier :"));
        filterPanel.add(inputFilterQuartier);
        filterPanel.add(new JLabel("Filtrer par date (JJ/MM/AAAA) :"));
        filterPanel.add(inputFilterDate);
        filterPanel.add(applyFilterButton);
        filterPanel.add(resetFilterButton);
        filterPanel.add(retourButton);

        panel.add(filterPanel, BorderLayout.SOUTH);

        frame.add(panel);
        frame.setVisible(true);

        // Charger les projets dès l'ouverture
        loadProjects();

        // Filtrer les projets
        applyFilterButton.addActionListener(e -> applyFilter(inputFilterQuartier.getText(), inputFilterDate.getText()));
        resetFilterButton.addActionListener(e -> loadProjects());
        retourButton.addActionListener(e -> frame.dispose());
    }

    private void loadProjects() {
        List<String[]> projects = readProjectsFromCSV();
        tableModel.setRowCount(0); // Réinitialiser la table
        for (String[] project : projects) {
            tableModel.addRow(project);
        }
    }

    private void applyFilter(String quartier, String dateDebut) {
        List<String[]> projects = readProjectsFromCSV();
        List<String[]> filteredProjects = new ArrayList<>();

        for (String[] project : projects) {
            boolean matchQuartier = quartier.isEmpty() || project[3].toLowerCase().contains(quartier.toLowerCase());
            boolean matchDateDebut = dateDebut.isEmpty() || project[5].equals(dateDebut);

            if (matchQuartier && matchDateDebut) {
                filteredProjects.add(project);
            }
        }

        tableModel.setRowCount(0); // Réinitialiser la table
        for (String[] project : filteredProjects) {
            tableModel.addRow(project);
        }

        // Afficher un message si aucun projet ne correspond aux critères
        if (filteredProjects.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Aucun projet trouvé pour les critères sélectionnés.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private List<String[]> readProjectsFromCSV() {
        List<String[]> projects = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(PROJETS_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] projectData = line.split(",", -1); // -1 pour inclure les champs vides
                if (projectData.length == 9) { // Vérifier que toutes les colonnes sont présentes
                    projects.add(projectData);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors de la lecture des projets.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return projects;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ConsulterProjets::new);
    }
}

