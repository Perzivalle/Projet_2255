import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class consulterRequete {

    private static final String CSV_FILE = "requeteTravaux.csv"; // Nom du fichier CSV
    private static final String CANDIDATURES_FILE = "candidatures.csv"; // Fichier pour sauvegarder les candidatures
    private JFrame frame;
    private JTable table;
    private DefaultTableModel tableModel;
    private List<String[]> allTravaux; // Liste pour stocker toutes les requêtes initiales
    private List<String[]> candidatures; // Liste pour stocker les candidatures déjà soumises

    public consulterRequete() {
        frame = new JFrame("Consulter Requêtes");
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel(new BorderLayout());

        JLabel titleLabel = new JLabel("Liste des Travaux Soumis", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        panel.add(titleLabel, BorderLayout.NORTH);

        // Configuration de la JTable
        String[] columnNames = {"Type", "Année", "Mois", "Jour", "Localisation", "Titre", "Statut"};
        tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        panel.add(scrollPane, BorderLayout.CENTER);

        // Panneau pour les filtres
        JPanel filterPanel = new JPanel(new FlowLayout());
        JTextField inputFilter = new JTextField(15);
        String[] filterOptions = {"Type", "Quartier", "Date de début (AAAA-MM-JJ)"};
        JComboBox<String> filterComboBox = new JComboBox<>(filterOptions);
        JButton applyFilterButton = new JButton("Appliquer Filtre");
        JButton resetFilterButton = new JButton("Réinitialiser");

        applyFilterButton.addActionListener(e -> applyFilter(inputFilter.getText(), filterComboBox.getSelectedItem().toString()));
        resetFilterButton.addActionListener(e -> resetTable());

        filterPanel.add(new JLabel("Filtrer par :"));
        filterPanel.add(filterComboBox);
        filterPanel.add(inputFilter);
        filterPanel.add(applyFilterButton);
        filterPanel.add(resetFilterButton);

        panel.add(filterPanel, BorderLayout.NORTH);

        // Boutons d'action
        JPanel actionButtonPanel = new JPanel(new FlowLayout());
        JButton submitCandidatureButton = new JButton("Soumettre une Candidature");
        JButton retirerCandidatureButton = new JButton("Retirer une Candidature");
        JButton refreshButton = new JButton("Actualiser");
        JButton annulerButton = new JButton("Annuler");

        submitCandidatureButton.addActionListener(e -> soumettreCandidature());
        retirerCandidatureButton.addActionListener(e -> retirerCandidature());
        refreshButton.addActionListener(e -> updateTable());

        // Retour au menu résident
        annulerButton.addActionListener(e -> frame.dispose());





        actionButtonPanel.add(submitCandidatureButton);
        actionButtonPanel.add(retirerCandidatureButton);
        actionButtonPanel.add(refreshButton);
        actionButtonPanel.add(annulerButton);


        panel.add(actionButtonPanel, BorderLayout.SOUTH);

        frame.add(panel);
        frame.setVisible(true);

        // Charger les travaux et candidatures dès l'ouverture
        updateTable();
    }


    private void updateTable() {
        allTravaux = lireRequetesDepuisCSV();
        candidatures = lireCandidaturesDepuisCSV();
        resetTable();
    }

    private void resetTable() {
        tableModel.setRowCount(0);
        for (String[] travail : allTravaux) {
            String statut = "Disponible";
            for (String[] candidature : candidatures) {
                if (Arrays.equals(travail, Arrays.copyOfRange(candidature, 0, travail.length))) {
                    statut = "Candidature soumise";
                    break;
                }
            }
            tableModel.addRow(new String[]{travail[0], travail[1], travail[2], travail[3], travail[4], travail[5], statut});
        }
    }

    private void applyFilter(String criteria, String filterType) {
        if (criteria == null || criteria.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Veuillez entrer une valeur pour le filtre.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<String[]> filteredTravaux = filterTravaux(criteria, filterType);
        tableModel.setRowCount(0);
        for (String[] travail : filteredTravaux) {
            String statut = "Disponible";
            for (String[] candidature : candidatures) {
                if (Arrays.equals(travail, Arrays.copyOfRange(candidature, 0, travail.length))) {
                    statut = "Candidature soumise";
                    break;
                }
            }
            tableModel.addRow(new String[]{travail[0], travail[1], travail[2], travail[3], travail[4], travail[5], statut});
        }
    }

    private List<String[]> filterTravaux(String criteria, String filterType) {
        return allTravaux.stream().filter(travail -> {
            switch (filterType) {
                case "Type":
                    return travail[0].equalsIgnoreCase(criteria);
                case "Quartier":
                    return travail[4].equalsIgnoreCase(criteria);
                case "Date de début (AAAA-MM-JJ)":
                    String date = travail[1] + "-" + travail[2] + "-" + travail[3]; // Année-Mois-Jour
                    return date.equals(criteria);
                default:
                    return false;
            }
        }).collect(Collectors.toList());
    }

    private void soumettreCandidature() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(frame, "Veuillez sélectionner un travail pour soumettre une candidature.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String statut = table.getValueAt(selectedRow, 6).toString();
        if ("Candidature soumise".equals(statut)) {
            JOptionPane.showMessageDialog(frame, "Vous avez déjà soumis une candidature pour ce travail.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Collecte des informations nécessaires
        String[] travail = new String[table.getColumnCount() - 1];
        for (int i = 0; i < table.getColumnCount() - 1; i++) {
            travail[i] = table.getValueAt(selectedRow, i).toString();
        }

        String dateDebut = JOptionPane.showInputDialog(frame, "Veuillez entrer la date de début (format : JJ/MM/AAAA) :");
        String dateFin = JOptionPane.showInputDialog(frame, "Veuillez entrer la date de fin (format : JJ/MM/AAAA) :");

        if (dateDebut != null && !dateDebut.isEmpty() && dateFin != null && !dateFin.isEmpty()) {
            sauvegarderCandidatureDansCSV(travail, dateDebut, dateFin);
            JOptionPane.showMessageDialog(frame, "Candidature envoyée avec succès !", "Succès", JOptionPane.INFORMATION_MESSAGE);

            // Envoi de la notification
            enregistrerNotification(travail, dateDebut, dateFin);

            updateTable();
        } else {
            JOptionPane.showMessageDialog(frame, "Dates invalides. Veuillez réessayer.", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void enregistrerNotification(String[] travail, String dateDebut, String dateFin) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("notifications.csv", true))) {
            String notification = String.join(",", travail) + ",Date Début: " + dateDebut + ",Date Fin: " + dateFin + ",Candidature";
            writer.write(notification);
            writer.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors de l'enregistrement de la notification.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }


    private void retirerCandidature() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(frame, "Veuillez sélectionner un travail pour retirer une candidature.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String statut = table.getValueAt(selectedRow, 6).toString();
        if (!"Candidature soumise".equals(statut)) {
            JOptionPane.showMessageDialog(frame, "Aucune candidature soumise pour ce travail.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String[] travail = new String[table.getColumnCount() - 1];
        for (int i = 0; i < table.getColumnCount() - 1; i++) {
            travail[i] = table.getValueAt(selectedRow, i).toString();
        }

        retirerCandidatureDansCSV(travail);
        JOptionPane.showMessageDialog(frame, "Candidature retirée avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
        updateTable();
    }

    private List<String[]> lireRequetesDepuisCSV() {
        List<String[]> travaux = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE))) {
            String ligne;
            while ((ligne = reader.readLine()) != null) {
                travaux.add(ligne.split(","));
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors de la lecture du fichier des travaux.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return travaux;
    }

    private List<String[]> lireCandidaturesDepuisCSV() {
        List<String[]> candidatures = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(CANDIDATURES_FILE))) {
            String ligne;
            while ((ligne = reader.readLine()) != null) {
                candidatures.add(ligne.split(","));
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors de la lecture du fichier des candidatures.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return candidatures;
    }

    private void sauvegarderCandidatureDansCSV(String[] travail, String dateDebut, String dateFin) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(CANDIDATURES_FILE, true))) {
            writer.write(String.join(",", travail) + ",Date Début: " + dateDebut + ",Date Fin: " + dateFin);
            writer.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors de la sauvegarde de la candidature.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }



    private void retirerCandidatureDansCSV(String[] travail) {
        List<String[]> updatedCandidatures = candidatures.stream()
                .filter(c -> !Arrays.equals(travail, Arrays.copyOfRange(c, 0, travail.length)))
                .collect(Collectors.toList());

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(CANDIDATURES_FILE))) {
            for (String[] candidature : updatedCandidatures) {
                writer.write(String.join(",", candidature));
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors de la suppression de la candidature.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(consulterRequete::new);
    }
}
