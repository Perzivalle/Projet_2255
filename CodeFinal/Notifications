import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class Notifications {

    private JFrame frame;
    private JTable table;
    private DefaultTableModel tableModel;
    private List<String[]> modifications;

    public Notifications() {
        frame = new JFrame("Notifications des Projets");
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel(new BorderLayout());

        JLabel titleLabel = new JLabel("Notifications des Projets", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        panel.add(titleLabel, BorderLayout.NORTH);

        // Configuration de la JTable avec la nouvelle colonne
        String[] columnNames = {"Notifications (cliquez pour plus de détails)"};
        tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        panel.add(scrollPane, BorderLayout.CENTER);

        // Boutons d'action
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton closeButton = new JButton("Fermer");
        closeButton.addActionListener(e -> frame.dispose());
        buttonPanel.add(closeButton);

        panel.add(buttonPanel, BorderLayout.SOUTH);

        frame.add(panel);
        frame.setVisible(true);

        // Charger les notifications
        loadNotifications();

        // Ajouter un événement pour gérer le clic sur une ligne
        table.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && table.getSelectedRow() != -1) {
                afficherDetailsNotification(table.getSelectedRow());
            }
        });
    }

    private void loadNotifications() {
        try {
            // Charger les projets soumis depuis la base de données
            List<String[]> projets = BaseDeDonnées.lireTous("projetsSoumis.csv");

            // Charger les modifications de projets depuis la base de données
            modifications = BaseDeDonnées.lireTous("modificationsProjets.csv");

            // Préparer les notifications pour affichage
            List<String[]> notifications = preparerNotifications(projets);

            tableModel.setRowCount(0); // Effacer les anciennes notifications
            for (String[] notification : notifications) {
                tableModel.addRow(new String[]{notification[0]});
            }

            // Ajouter les modifications comme notifications
            for (String[] modification : modifications) {
                tableModel.addRow(new String[]{"La modification d'un projet a été faite"});
            }

            if (notifications.isEmpty() && modifications.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Aucune notification disponible.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors du chargement des notifications.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public static int getNotificationCount() {
        try {
            // Compter les notifications dans projetsSoumis.csv
            List<String[]> projets = BaseDeDonnées.lireTous("projetsSoumis.csv");
            int countProjets = projets.size();

            // Compter les notifications dans modificationsProjets.csv
            List<String[]> modifications = BaseDeDonnées.lireTous("modificationsProjets.csv");
            int countModifications = modifications.size();

            // Additionner les deux
            return countProjets + countModifications;
        } catch (Exception e) {
            return 0; // En cas d'erreur, retourner 0
        }
    }



    private List<String[]> preparerNotifications(List<String[]> projets) {
        List<String[]> notifications = new ArrayList<>();

        for (String[] projet : projets) {
            String typeNotif = "Un projet a été soumis"; // Par défaut, supposons que chaque ligne est un projet soumis
            notifications.add(new String[]{typeNotif, projet[0], projet[1], projet[2], projet[3], projet[4], projet[5], projet[6]});
        }

        return notifications;
    }

    private void afficherDetailsNotification(int selectedRow) {
        try {
            int projetsCount = BaseDeDonnées.lireTous("projetsSoumis.csv").size();

            if (selectedRow < projetsCount) {
                // Notification provenant de projetsSoumis.csv
                List<String[]> projets = BaseDeDonnées.lireTous("projetsSoumis.csv");
                String[] projet = projets.get(selectedRow);

                // Afficher les détails dans une nouvelle fenêtre
                String details = String.format(
                        "Titre : %s%nType : %s%nQuartiers : %s%nRues : %s%nDate Début : %s%nDate Fin : %s%nStatut : %s",
                        projet[0], projet[1], projet[2], projet[3], projet[4], projet[5], projet[6]
                );

                JOptionPane.showMessageDialog(frame, details, "Détails de la Notification", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Notification provenant de modificationsProjets.csv
                int modificationIndex = selectedRow - projetsCount;
                String[] modification = modifications.get(modificationIndex);

                // Afficher les détails de la modification
                String details = String.format(
                        "Titre du projet : %s%nType de modification : %s%nAncienne valeur : %s%nNouvelle valeur : %s",
                        modification[0], modification[1], modification[2], modification[3]
                );

                JOptionPane.showMessageDialog(frame, details, "Détails de la Modification", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors de l'affichage des détails.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Notifications::new);
    }
}
